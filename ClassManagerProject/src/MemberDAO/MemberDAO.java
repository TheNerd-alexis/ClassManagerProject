package MemberDAO;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class MemberDAO {
	
	private static String DBname = "member";

	private Connection connection;

	DchDAO dchDAO;
	event.EventDao eventDAO;
	FriendDAO friendDAO;

	/**
	 * @param connection
	 * @return MemberDAO
	 */
	public static MemberDAO getInstance(Connection connection) {
		return new MemberDAO(connection);
	}

	private MemberDAO(Connection connection) {
		this.connection = connection;
		dchDAO = DchDAO.getInstance(connection);
		friendDAO = friendDAO.getInstance(connection);
	}

	/**
	 * insert member into member database
	 * 
	 * @param MID
	 *            user ID
	 * @param PW
	 *            user PW
	 * @param MNAME
	 *            user name
	 * @param MCL
	 *            user class
	 * @return 1 = succeed, 2 = failed(same ID), 3 = create DCH failed, <br>
	 *         4 = create friend failed
	 */
	public int insertMember(String MID, String PW, String MNAME, String MCL) {
		String sql = "INSERT INTO " + DBname + " (MID, PW, SALT, MNAME, MCL) " + "VALUES(?,?,?,?,?)";
		PreparedStatement statement = null;
		String[] pw = password(PW);
		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, MID);
			statement.setString(2, pw[0]);
			statement.setString(3, pw[1]);
			statement.setString(4, MNAME);
			statement.setString(5, MCL);
			statement.executeUpdate();
			/** insertMember Succeed */
			if (dchDAO.createDCHdb(MID) == 2)
				return 3;
			if (friendDAO.createFriendDb(MID) == 2)
				return 4;
			return 1;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			/** insertMember Failed */
			return 2;
		} finally {
			try {
				if (statement != null || !statement.isClosed())
					statement.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/**
	 * delete member from member database
	 * 
	 * @param MID
	 *            typed ID
	 * @param PW
	 *            typed PW
	 * @param SALT
	 *            32byte password salt generated by SecureRandom
	 * @return 1 = succeed, 0 = wrong password, 3 = undefined user
	 */
	public int deleteMember(String MID, String PW) {
		String pw = selectPwByID(MID);
		String salt = selectSaltByID(MID);
		if (pw == null)
			return 3;
		if (password(PW, salt).equals(pw)) {
			String sql = "DELETE FROM " + DBname + " WHERE MID = ? AND PW = ?";
			PreparedStatement statement = null;
			try {
				statement = connection.prepareStatement(sql);
				statement.setString(1, MID);
				statement.setString(2, password(PW, salt));
				statement.executeUpdate();
				return 1;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				try {
					if (statement != null || !statement.isClosed())
						statement.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		/** password is not matched with ID */
		return 2;
	}

	/**
	 * select a password by user ID
	 * 
	 * @param MID
	 *            user ID
	 * @return PW selected by ID
	 */
	public String selectPwByID(String MID) {
		String sql = "SELECT PW FROM " + DBname + " WHERE MID = ?";
		String pw = null;
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, MID);
			ResultSet temp = statement.executeQuery();
			if (temp.next())
				pw = temp.getString("PW");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (statement != null || !statement.isClosed())
					statement.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return pw;
	}

	/**
	 * select a salt by user ID
	 * 
	 * @param MID
	 *            user ID
	 * @return SALT selected by ID
	 */
	public String selectSaltByID(String MID) {
		String sql = "SELECT SALT FROM " + DBname + " WHERE MID = ?";
		String salt = null;
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(sql);
			statement.setString(1, MID);
			ResultSet temp = statement.executeQuery();
			if (temp.next())
				salt = temp.getString("SALT");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (statement != null || !statement.isClosed())
					statement.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return salt;
	}

	/**
	 * generate secured password and its salt
	 * 
	 * @param str
	 * @return {secured pw, salt}
	 */
	public static String[] password(String pw) {
		String salt = null;
		String SHA = "";
		try {
			MessageDigest sh = MessageDigest.getInstance("SHA-256");
			salt = byteArrayToHex(SecureRandom.getInstanceStrong().generateSeed(16));
			pw = salt + pw;
			sh.update(pw.getBytes());
			byte byteData[] = sh.digest();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
			SHA = sb.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			SHA = null;
		}
		String[] result = { SHA, salt };

		return result;
	}

	/**
	 * find secured password with given salt
	 * 
	 * @param pw
	 *            user PW
	 * @param salt
	 *            password salt
	 * @return secured PW
	 */
	public static String password(String pw, String salt) {
		String SHA = "";
		try {
			MessageDigest sh = MessageDigest.getInstance("SHA-256");
			pw = salt + pw;
			sh.update(pw.getBytes());
			byte byteData[] = sh.digest();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}
			SHA = sb.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			SHA = null;
		}
		return SHA;
	}

	public static byte[] hexToByteArray(String hex) {
		if (hex == null || hex.length() == 0) {
			return null;
		}

		byte[] ba = new byte[hex.length() / 2];
		for (int i = 0; i < ba.length; i++) {
			ba[i] = (byte) Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);
		}
		return ba;
	}

	public static String byteArrayToHex(byte[] ba) {
		if (ba == null || ba.length == 0) {
			return null;
		}

		StringBuffer sb = new StringBuffer(ba.length * 2);
		String hexNumber;
		for (int x = 0; x < ba.length; x++) {
			hexNumber = "0" + Integer.toHexString(0xff & ba[x]);

			sb.append(hexNumber.substring(hexNumber.length() - 2));
		}
		return sb.toString();
	}

}

class Member {
	private String MID;
	private String PW;
	private String MNAME;
	private String MCL;

	String getMID() {
		return MID;
	}

	void setMID(String mID) {
		MID = mID;
		// FRIENDdb = "friend_" + mID;
		// EVNTdb = "event_" + mID;
	}

	String getPW() {
		return PW;
	}

	void setPW(String pW) {
		PW = pW;
	}

	String getMNAME() {
		return MNAME;
	}

	void setMNAME(String mNAME) {
		MNAME = mNAME;
	}

	String getMCL() {
		return MCL;
	}

	void setMCL(String mCL) {
		MCL = mCL;
	}
}